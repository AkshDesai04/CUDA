When a kernel that never terminates (i.e., it contains an infinite loop) is launched, the host code that called `cudaLaunchKernel` (or the equivalent API like `kernel<<<grid,block>>>()`) will return immediately, because CUDA kernel launches are asynchronous. However, when the program reaches the end of `main` and begins the normal program termination sequence, the CUDA runtime will try to clean up all resources that belong to the device. Part of that cleanup involves making sure that every kernel that was launched has finished executing. Since the kernel is stuck in an infinite loop, it never reaches its exit point, so the runtimeâ€™s cleanup routine will block indefinitely waiting for that kernel to finish. Consequently, the `main` function never actually exits; the program remains alive and stuck at the point where the runtime is waiting for the hanging kernel to complete.