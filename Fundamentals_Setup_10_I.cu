model='gpt-oss:20b' created_at='2025-09-01T07:12:34.579907276Z' done=True done_reason='stop' total_duration=102802129490 load_duration=146745260 prompt_eval_count=270 prompt_eval_duration=451939666 eval_count=1023 eval_duration=28262076824 message=Message(role='assistant', content='# Aim: `Write a function bool is_compute_capable(int major, int minor) that queries the primary device and returns true if its compute capability is greater than or equal to the specified version.`\n\n""" \nWe need to provide a complete CUDA C program that defines the requested function and demonstrates its usage. \nThe function must:\n1. Query the primary device using `cudaGetDevice`.\n2. Retrieve the device properties via `cudaGetDeviceProperties`.\n3. Compare the device\'s `major` and `minor` compute capability with the provided arguments.\n4. Return `true` if the device\'s capability is greater than or equal to the requested version, otherwise `false`.\n\nWe\'ll include standard headers and `cuda_runtime.h` for CUDA runtime API. \n`bool` is available via `<stdbool.h>` in C99 or we can simply use C++\'s built-in bool by compiling as a CUDA C++ file (`.cu` is acceptable for both C and C++). \nA simple `main` function will call `is_compute_capable` with a couple of test cases and print the results.\n\nThe program will compile with `nvcc`. \nAll error handling is minimal: if any CUDA call fails, the function returns `false`. \n"""\n\n#include <stdio.h>\n#include <cuda_runtime.h>\n#include <stdbool.h>\n\nbool is_compute_capable(int required_major, int required_minor)\n{\n    int dev = 0;\n    cudaError_t err = cudaGetDevice(&dev);\n    if (err != cudaSuccess) {\n        // Failed to get current device\n        return false;\n    }\n\n    cudaDeviceProp prop;\n    err = cudaGetDeviceProperties(&prop, dev);\n    if (err != cudaSuccess) {\n        // Failed to get device properties\n        return false;\n    }\n\n    // Compare compute capability\n    if (prop.major > required_major) {\n        return true;\n    } else if (prop.major == required_major) {\n        return prop.minor >= required_minor;\n    } else {\n        return false;\n    }\n}\n\nint main(void)\n{\n    // Example usage: check if device supports at least compute capability 7.0\n    int req_major = 7;\n    int req_minor = 0;\n\n    bool supported = is_compute_capable(req_major, req_minor);\n    if (supported) {\n        printf("Device supports compute capability %d.%d or higher.\\n", req_major, req_minor);\n    } else {\n        printf("Device does NOT support compute capability %d.%d or higher.\\n", req_major, req_minor);\n    }\n\n    // Another test: 8.0\n    req_major = 8;\n    req_minor = 0;\n    supported = is_compute_capable(req_major, req_minor);\n    if (supported) {\n        printf("Device supports compute capability %d.%d or higher.\\n", req_major, req_minor);\n    } else {\n        printf("Device does NOT support compute capability %d.%d or higher.\\n", req_major, req_minor);\n    }\n\n    return 0;\n}', images=None, tool_calls=None)