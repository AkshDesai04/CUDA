If you pass a negative value to `cudaMalloc`, the function will interpret the value as a large unsigned integer because the size parameter is of type `size_t` (an unsigned integer type). The conversion of a negative signed integer to an unsigned type will produce a very large value (the two's‑complement representation). `cudaMalloc` will then try to allocate that huge amount of device memory, which almost certainly fails. The return value will be an error code such as `cudaErrorInvalidValue` or `cudaErrorMemoryAllocation`. In practice, you should always pass a non‑negative (unsigned) size; passing a negative number is considered a misuse and will result in a runtime error.