model='gpt-oss:20b' created_at='2025-09-01T06:40:27.550113704Z' done=True done_reason='stop' total_duration=109909796111 load_duration=75894506 prompt_eval_count=256 prompt_eval_duration=371930021 eval_count=1122 eval_duration=30812053854 message=Message(role='assistant', content='# Aim: `Query and print the computeMode of the primary GPU (e.g., Default, Exclusive, Prohibited).`\n\n""" \nThe task is to write a simple CUDA C program that queries and prints the compute mode of the primary GPU device. \nThe compute mode can be retrieved using the CUDA Runtime API by calling `cudaDeviceGetAttribute` with the attribute \n`cudaDevAttrComputeMode`. The returned value is an enum of type `cudaComputeMode` with possible values \n`cudaComputeModeDefault`, `cudaComputeModeExclusive`, `cudaComputeModeProhibited`, and `cudaComputeModeExclusiveProcess`. \nWe will query device 0 (the primary device), convert the enum to a human‑readable string, and print it. \n\nKey steps:\n1. Include necessary headers: <cuda_runtime.h>, <stdio.h>, <stdlib.h>.\n2. Define a macro `CHECK_CUDA(call)` to wrap CUDA calls and handle errors.\n3. In `main`, obtain the device count using `cudaGetDeviceCount`. If zero, print an error.\n4. Query the compute mode of device 0 using `cudaDeviceGetAttribute`.\n5. Map the enum value to a string via a switch statement.\n6. Print the result in a clear format.\n7. Return 0 on success.\n\nThe program is self‑contained and compilable with `nvcc`. """\n\n#include <cuda_runtime.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#define CHECK_CUDA(call)                                                       \\\n    do {                                                                       \\\n        cudaError_t err = (call);                                              \\\n        if (err != cudaSuccess) {                                             \\\n            fprintf(stderr, "CUDA error in file %s line %d: %s\\n",            \\\n                    __FILE__, __LINE__, cudaGetErrorString(err));              \\\n            return EXIT_FAILURE;                                              \\\n        }                                                                      \\\n    } while (0)\n\nconst char* computeModeToString(int mode) {\n    switch (mode) {\n        case cudaComputeModeDefault:\n            return "Default";\n        case cudaComputeModeExclusive:\n            return "Exclusive";\n        case cudaComputeModeProhibited:\n            return "Prohibited";\n        case cudaComputeModeExclusiveProcess:\n            return "Exclusive Process";\n        default:\n            return "Unknown";\n    }\n}\n\nint main(void) {\n    int deviceCount = 0;\n    CHECK_CUDA(cudaGetDeviceCount(&deviceCount));\n\n    if (deviceCount == 0) {\n        fprintf(stderr, "No CUDA devices found.\\n");\n        return EXIT_FAILURE;\n    }\n\n    int device = 0; // Primary GPU\n    int computeMode = 0;\n    CHECK_CUDA(cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, device));\n\n    printf("Compute Mode of device %d: %s\\n", device, computeModeToString(computeMode));\n\n    return EXIT_SUCCESS;\n}\n', images=None, tool_calls=None)