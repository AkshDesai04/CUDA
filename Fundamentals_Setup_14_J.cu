model='gpt-oss:20b' created_at='2025-09-01T07:35:47.277025946Z' done=True done_reason='stop' total_duration=129353886810 load_duration=146984120 prompt_eval_count=246 prompt_eval_duration=303607375 eval_count=1011 eval_duration=27749675250 message=Message(role='assistant', content='# Aim: `Query and print the maximum pitch in bytes for a memory allocation.`\n\n""" \nThe user wants a CUDA C program that queries and prints the maximum pitch (in bytes) that can be used for a pitched memory allocation on each CUDA device.  \nTo achieve this, we will:\n\n1. Include the necessary headers (`stdio.h` and `cuda_runtime.h`).\n2. Define a small error‑checking macro `CHECK_CUDA_ERROR` that wraps CUDA API calls and prints an error message before exiting if the call fails.\n3. In `main`, first obtain the number of CUDA devices with `cudaGetDeviceCount`.\n4. For each device:\n   - Query device properties using `cudaGetDeviceProperties` (optional, to print the device name).\n   - Use `cudaDeviceGetAttribute` with the attribute `cudaDevAttrMaxPitch` to get the maximum pitch in bytes.\n   - Print the device index, name, and the maximum pitch value.\n5. End the program gracefully.\n\nThis program will compile with `nvcc` and output the max pitch for each device on the system. No external libraries or advanced features are required. The code is self‑contained and follows good error‑checking practices. \n"""\n\n#include <stdio.h>\n#include <cuda_runtime.h>\n\n#define CHECK_CUDA_ERROR(call)                                 \\\n    do {                                                       \\\n        cudaError_t err = (call);                              \\\n        if (err != cudaSuccess) {                              \\\n            fprintf(stderr, "CUDA error at %s:%d - %s\\n",      \\\n                    __FILE__, __LINE__, cudaGetErrorString(err)); \\\n            return EXIT_FAILURE;                               \\\n        }                                                      \\\n    } while (0)\n\nint main(void) {\n    int deviceCount = 0;\n    CHECK_CUDA_ERROR(cudaGetDeviceCount(&deviceCount));\n\n    if (deviceCount == 0) {\n        printf("No CUDA devices found.\\n");\n        return EXIT_SUCCESS;\n    }\n\n    for (int dev = 0; dev < deviceCount; ++dev) {\n        cudaDeviceProp prop;\n        CHECK_CUDA_ERROR(cudaGetDeviceProperties(&prop, dev));\n\n        int maxPitch = 0;\n        CHECK_CUDA_ERROR(cudaDeviceGetAttribute(&maxPitch,\n            cudaDevAttrMaxPitch, dev));\n\n        printf("Device %d: %s\\n", dev, prop.name);\n        printf("  Maximum pitch: %d bytes\\n", maxPitch);\n    }\n\n    return EXIT_SUCCESS;\n}\n', images=None, tool_calls=None)